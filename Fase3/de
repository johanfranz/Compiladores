tenemos 2 codigos claramente si hacemos una inspeccion visual notaremos que son exactamente iguales por lo que deducimos se trata de plagio, ademas existen tecnicas como la de similaridad por coseno que nos ayuda a detectar este plagio a nivel textual es decir en textos de investigacion o libros, incluso se puede aplicar esa tecnica para detectar plagio a nivel de codigo 
------------------------
pero que pasa si la persona que ejecuta el plagio pretende cambiar los nombres de las variables, del los metodos, de las cosntantes y todo lo que pueda cambiar, para que a nivel textual sea dificil de detectar el plagio, las tecnicas de plagio a nivel textual no seria de mucha ayuda en este escenario, ya que nos votaria simplemente que los documentos o codigos son diferentes y por tanto no hay plagio.
Pero realmente si hay plagio ya que puede ser que a nivel textual no sean parecidos, pero a nivel algoritmico si lo hay, es decir la manera como se resolvio cierto problema es exactamente igual, solo se cambio las variables
Para estos escenarios podemos abordar el problema haciendo uso de tecnicas de compiladores los cuales empiezan por el analisis lexico.
------------
El analisis lexico es la primera etapa en la construccion de compiladores como podemos ver en el diagrama entra el programa fuente hacia el analizador lexico, este se encarga de separarlo por tokens en una tabla donde se guarde el token, su tipo, linea en la que aparece y su posicion.
luego el analizador sintactico recibe estos componentes lexicos a travez de la tabla de simbolos generados para su posterior procesamiento.
en este trabajo nos centramos principalmente en la parte del analisis lexico el cual explicare brevemente
-------
Mediante el analisis lexico de un codigo podemos ir recorriendo el codigo token por token y almacenralo en una tabla, en el ejemplo tenemos una linea de codigo para explicar este proceso.
-----
----
---
Y asi es como se construye la tabla de tokens
------
ahora tenemos un metodo de programcion dinamica. el cual es usado para representar zonas de similitud entre 2 acidos nucleicos, proteinas entre otros. 
este metodo es conocido como el algoritmo de Needleman Wunch, 
-----
ahora supongamos que tenemos las siguientes secuencias para ello usaremos una matriz de sustitucion con los respectivos parametros segun el problema que se quiera resolver  estos parametros son valores de correspondencia entre elementos, y valores de penalizacion para la apertura y extencion de GAPS.
---
Por otro lado debemos contar con una funcion de estimacion del puntaje para cada situacion que pueda presentarse en el alineamiento, esto implica que ambos caracters se encuentren alineados, o que se encuentren alineados mediante un gap.
---
Cada una de estas situaciones es evaluada en una matriz de programacion dinamica que se construye colocando ambas secuencias en la primera fila y columna de la matriz y seguidamente completando con los valores de penalizacion por inclusion de espacio o gaps a partir de su vertice con valor cero
---
Seguidamente se procede a completar la matriz asignando un valor de puntaje a cada una de las celdas a partir de sus vecinos
----
Esto lo realizamo a travez de la funcion de puntaje y escogiendo en cada caso la situacion que produsca un maximo valor
---
ASi vamos completando la matriz, una vez terminado la tablita debemos obtener el score que nos dara el valor de alineamiento optimo para las secuencias para obtener este alineamiento se realiza el recorrido inverso de la matriz tambien llamado TRACEBACK
----
Donde se recorre los caminos que dieron origen a los valores de maximo puntaje en cada una de las celdas,
entonces decimos que un movimiento en vertical representaria la inclusion de un espacio en la secuencia de la primera linea, la diagonal seria el alineamiento de los 2 caracteres de las 2 secuencias y los horizontales seria de apertura de espacion en las secuencias de cada columna y asi es como obtenemos la alineacion.